generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model branches {
  branch_id      String                      @id @default(uuid()) @db.Uuid
  branch_name    String                      @db.VarChar(255)
  address        String                      @db.VarChar(255)
  phone_number   String                      @db.VarChar(255)
  branch_status  enum_branches_branch_status
  owner_id       String                      @db.Uuid
  createdAt      DateTime?                   @db.Timestamptz(6)
  updatedAt      DateTime?                   @db.Timestamptz(6)
  users          users                       @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  consumers      consumers[]
  memberships    memberships[]
  stores         stores[]
  invoices       invoices[]
  branch_details branch_details[]

  @@index([branch_name])
  @@index([owner_id])
}

model branch_details {
  id                                String    @id @default(uuid()) @db.Uuid
  branch_id                         String    @db.Uuid
  so_dang_ky                        String
  ten_nha_thuoc                     String
  loai_hinh                         String
  tinh                              String
  huyen                             String
  dia_chi                           String
  nguoi_dai_dien                    String
  nguoi_chiu_trach_nhiem            String
  nguoi_chiu_trach_nhiem_chuyen_mon String
  so_chung_chi_hanh_nghe            String
  createdAt                         DateTime? @default(now())
  updatedAt                         DateTime  @updatedAt

  branches branches @relation(fields: [branch_id], references: [branch_id], onDelete: Cascade)
}

model consumers {
  id             String                 @id @default(uuid()) @db.Uuid
  branch_id      String                 @db.Uuid
  revenue        BigInt?                @default(0)
  debit          BigInt?                @default(0)
  consumer_name  String                 @db.VarChar(255)
  gender         enum_consumers_gender?
  consumer_email String?                @db.VarChar(255)
  phone_number   String                 @db.VarChar(255)
  tax_code       String?                @db.VarChar(255)
  company_name   String?                @db.VarChar(255)
  date_of_birth  DateTime?              @db.Timestamptz(6)
  facebook       String?                @db.VarChar(255)
  address        String?                @db.VarChar(255)
  notes          String?                @db.VarChar(255)
  province_city  String?                @db.VarChar(255)
  district       String?                @db.VarChar(255)
  ward           String?                @db.VarChar(255)
  createdAt      DateTime?              @db.Timestamptz(6)
  updatedAt      DateTime?              @db.Timestamptz(6)
  branches       branches               @relation(fields: [branch_id], references: [branch_id], onDelete: Cascade)

  @@index([branch_id])
  @@index([consumer_name])
  @@index([consumer_email])
  @@index([phone_number])
  invoices invoices[]
}

model groups {
  id             String           @id @default(uuid()) @db.Uuid
  store_id       String           @db.Uuid
  group_name     String           @db.VarChar(255)
  description    String?          @db.VarChar(255)
  status         Int              @default(1)
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @db.Timestamptz(6)
  deleted_at     DateTime?        @db.Timestamptz(6)
  deleted_by     String?          @db.Uuid
  stores         stores           @relation(fields: [store_id], references: [id])
  product_groups product_groups[]
  products       products[]

  @@index([store_id])
  @@index([group_name])
}

model memberships {
  id              String                           @id @default(uuid()) @db.Uuid
  username        String                           @db.VarChar(255)
  first_name      String                           @db.VarChar(255)
  last_name       String                           @db.VarChar(255)
  hire_date       DateTime                         @db.Timestamptz(6)
  password        String                           @db.VarChar(255)
  email           String?                          @db.VarChar(255)
  phone_number    String?                          @db.VarChar(255)
  avatar          String?                          @db.VarChar(255)
  notes           String?                          @db.VarChar(255)
  employee_status enum_memberships_employee_status
  branch_id       String                           @db.Uuid
  reset_token     String?                          @db.VarChar(255)
  permission      String[]                         @db.VarChar(255)
  createdAt       DateTime?                        @db.Timestamptz(6)
  updatedAt       DateTime?                        @db.Timestamptz(6)
  branches        branches                         @relation(fields: [branch_id], references: [branch_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([branch_id])
  @@index([username])
  @@index([email])
  @@index([phone_number])
}

model product_groups {
  product_id String   @db.Uuid
  group_id   String   @db.Uuid
  createdAt  DateTime @default(dbgenerated("'2024-12-10 16:55:24.726+07'::timestamp with time zone")) @db.Timestamptz(6)
  updatedAt  DateTime @default(dbgenerated("'2024-12-10 16:55:24.727+07'::timestamp with time zone")) @db.Timestamptz(6)
  groups     groups   @relation(fields: [group_id], references: [id], onDelete: Cascade)
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@id([product_id, group_id])
  @@index([group_id])
}

model product_unit_labels {
  product_id    String        @db.Uuid
  product_unit  String        @db.Uuid
  createdAt     DateTime      @db.Timestamptz(6)
  updatedAt     DateTime      @db.Timestamptz(6)
  products      products      @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_units product_units @relation(fields: [product_unit], references: [id], onDelete: Cascade)

  @@ignore // ignore because no id
}

model product_units {
  id                     String                @id @default(uuid()) @db.Uuid
  store_id               String                @db.Uuid
  name                   String                @db.VarChar(255)
  value                  Int
  no                     String                @db.VarChar(255)
  is_base                Int
  latest_parcel_no       String?               @db.VarChar(255)
  latest_parcel_exp_date String?               @db.VarChar(255)
  created_at             DateTime              @db.Timestamptz(6)
  updated_at             DateTime              @db.Timestamptz(6)
  product_unit_labels    product_unit_labels[] @ignore
  stores                 stores                @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products               products[]

  @@index([store_id])
  @@index([name])
}

model products {
  id                 String    @id @default(uuid()) @db.Uuid
  store_id           String    @db.Uuid
  product_type       String    @db.VarChar(255)
  medicine_id        String?   @db.VarChar(255)
  barcode            String?   @db.VarChar(255)
  product_no         String    @db.VarChar(255)
  product_name       String    @db.VarChar(255)
  shortcut           String?   @db.VarChar(255)
  original_price     Float
  sell_price         Float
  weight             Float?
  quantity_of_stock  Int
  group_id           String?   @db.Uuid
  using_id           Int
  base_unit          String    @db.VarChar(255)
  status             Int       @default(1)
  created_at         DateTime  @default(now()) @db.Timestamptz(6)
  updated_at         DateTime  @default(now()) @db.Timestamptz(6)
  min_quantity       Int
  max_quantity       Int
  description        String?   @db.VarChar(255)
  note               String?   @db.VarChar(255)
  manufacturer       String?   @db.VarChar(255)
  made_in            String?   @db.VarChar(255)
  deleted_at         DateTime? @db.Timestamptz(6)
  deleted_by         String?   @db.Uuid
  avg_original_price Float
  default_image      String?   @db.VarChar(255)
  productUnit        String    @db.Uuid
  quantity           Json      @db.Json
  store_group_id     String?   @db.Uuid

  product_groups      product_groups[]
  invoice_items       invoice_items[]

  product_unit_labels product_unit_labels[] @ignore
  groups              groups?               @relation(fields: [group_id], references: [id])
  product_units       product_units         @relation(fields: [productUnit], references: [id])
  stores              stores                @relation(fields: [store_id], references: [id])
  store_group         store_group?          @relation(fields: [store_group_id], references: [id])

  @@index([store_id])
  @@index([group_id])
  @@index([product_name])
  @@index([barcode])
  @@index([product_no])
  @@index([medicine_id])
}

model stores {
  id            String          @id @default(uuid()) @db.Uuid
  branch_id     String          @db.Uuid
  store_name    String          @db.VarChar(255)
  address       String          @db.VarChar(255)
  phone         String?         @db.VarChar(255)
  email         String?         @db.VarChar(255)
  created_at    DateTime        @default(now()) @db.Timestamptz(6)
  updated_at    DateTime        @default(now()) @db.Timestamptz(6)
  status        Int             @default(1)
  description   String?         @db.VarChar(255)
  deleted_at    DateTime?       @db.Timestamptz(6)
  deleted_by    String?         @db.Uuid
  groups        groups[]
  product_units product_units[]
  products      products[]
  branches      branches        @relation(fields: [branch_id], references: [branch_id], onDelete: NoAction, onUpdate: NoAction)

  providers   providers[]
  clinics     clinics[]
  doctors     doctors[]
  store_group store_group[]
  assets      assets[]

  @@index([branch_id])
  @@index([store_name])
}

model store_group {
  id          String    @id @default(uuid()) @db.Uuid
  store_id    String    @db.Uuid
  group_name  String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime  @default(now()) @db.Timestamptz(6)
  status      Int       @default(1)
  description String?   @db.VarChar(255)
  deleted_at  DateTime? @db.Timestamptz(6)
  deleted_by  String?   @db.Uuid
  stores      stores    @relation(fields: [store_id], references: [id])

  products products[]

  @@index([store_id])
  @@index([group_name])
}

model clinics {
  id          String    @id @default(uuid()) @db.Uuid
  store_id    String    @db.Uuid
  clinic_name String    @db.VarChar(255)
  address     String    @db.VarChar(255)
  phone       String?   @db.VarChar(255)
  email       String?   @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime  @default(now()) @db.Timestamptz(6)
  status      Int       @default(1)
  description String?   @db.VarChar(255)
  deleted_at  DateTime? @db.Timestamptz(6)
  store       stores    @relation(fields: [store_id], references: [id])

  @@index([store_id])
}

model doctors {
  id             String    @id @default(uuid()) @db.Uuid
  store_id       String    @db.Uuid
  doctor_name    String    @db.VarChar(255)
  specialization String?   @db.VarChar(255)
  phone          String?   @db.VarChar(255)
  email          String?   @db.VarChar(255)
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime  @default(now()) @db.Timestamptz(6)
  status         Int       @default(1)
  deleted_at     DateTime? @db.Timestamptz(6)
  store          stores    @relation(fields: [store_id], references: [id])

  @@index([store_id])
}

model providers {
  id          String  @id @default(uuid()) @db.Uuid // Primary key
  companyName String // Tên công ty
  phoneNumber String // Số điện thoại
  email       String? // Email (có thể null)
  taxCode     String? // Mã số thuế (có thể null)
  address     String? // Địa chỉ (có thể null)
  city        String // Thành phố
  district    String // Quận/huyện
  wards       String // Xã/phường
  note        String? // Ghi chú (có thể null)
  storeId     String  @db.Uuid // ID cửa hàng (liên kết đến bảng Store)

  createdAt DateTime @default(now()) // Thời điểm tạo
  updatedAt DateTime @updatedAt // Thời điểm cập nhật tự động

  store stores @relation(fields: [storeId], references: [id])
}

model users {
  id           String     @id @default(uuid()) @db.Uuid
  username     String     @db.VarChar(255)
  password     String     @db.VarChar(255)
  email        String?    @db.VarChar(255)
  age          Int?
  phone_number String?    @db.VarChar(255)
  address      String?    @db.VarChar(255)
  avatar       String?    @db.VarChar(255)
  notes        String?    @db.VarChar(255)
  is_active    Boolean    @default(true)
  last_login   DateTime?  @db.Timestamptz(6)
  reset_token  String?    @db.VarChar(255)
  permission   String[]   @default(["Store.All", "Report.All", "Supplier.All", "Medicine.All", "Membership.All", "Promotion.All", "Customer.All", "User.Read", "User.Update", "User.Create"]) @db.VarChar(255)
  createdAt    DateTime?  @db.Timestamptz(6)
  updatedAt    DateTime?  @db.Timestamptz(6)
  branches     branches[]
  points       points[]

  @@index([username])
  @@index([email])
  @@index([phone_number])
}

model points {
  id          String   @id @default(uuid()) @db.Uuid // Primary key
  userId      String   @unique @db.Uuid // Liên kết đến bảng users
  totalPoints Int      @default(0) // Tổng số điểm hiện tại
  createdAt   DateTime @default(now()) // Thời gian tạo
  updatedAt   DateTime @updatedAt // Thời gian cập nhật tự động

  user              users                @relation(fields: [userId], references: [id], onDelete: Cascade) // Quan hệ 1-1 với bảng users
  pointTransactions point_transactions[] // Danh sách giao dịch điểm
}

model point_transactions {
  id        String   @id @default(uuid()) @db.Uuid // Primary key
  pointId   String   @db.Uuid // Liên kết đến bảng points
  type      String   @db.VarChar(255) // Loại giao dịch (e.g., "add", "redeem")
  amount    Int // Số điểm giao dịch (có thể âm hoặc dương)
  note      String?  @db.Text // Ghi chú
  createdAt DateTime @default(now()) // Thời gian thực hiện giao dịch

  points points @relation(fields: [pointId], references: [id], onDelete: Cascade) // Quan hệ 1-n với bảng points
}

model invoices {
  id                 String    @id @default(uuid()) @db.Uuid
  branchId           String    @db.Uuid
  saleDate           DateTime  @db.Date
  saleTime           String
  customerName       String?
  customerId         String?   @db.Uuid
  priceList          String?
  isPrescriptionSale Boolean?
  totalPrice         Float
  discount           Float     @default(0)
  amountDue          Float
  amountPaid         Float     @default(0)
  debit              Float     @default(0)
  notes              String?
  autoPrintInvoice   Boolean?
  printBatchNumber   Boolean?
  userType           UserType?
  userId             String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  items        invoice_items[]
  otherCharges other_charges[]
  branches     branches        @relation(fields: [branchId], references: [branch_id])
  customers    consumers?      @relation(fields: [customerId], references: [id])

  @@index([branchId])
  @@index([saleDate])
  @@index([customerName])
  @@map("invoices")
}

model invoice_items {
  id          String  @id @default(uuid()) @db.Uuid
  invoiceId   String  @db.Uuid
  productId   String?  @db.Uuid
  productName String
  quantity    Float
  price       Float
  total       Float
  unit        String
  note        String?

  invoice invoices @relation(fields: [invoiceId], references: [id])
  product products? @relation(fields: [productId], references: [id])

  @@map("invoice_items")
}

model other_charges {
  id        String @id @default(uuid()) @db.Uuid
  invoiceId String @db.Uuid
  name      String
  value     Float  @default(0)

  invoice invoices @relation(fields: [invoiceId], references: [id])

  @@map("other_charges")
}

model assets {
  id          String   @id @default(uuid()) @db.Uuid
  store_id    String   @db.Uuid
  path        String   @db.VarChar(255)
  name        String   @db.VarChar(255)
  description String?  @default("") @db.VarChar(255)
  url         String   @db.VarChar(255)
  type        String   @db.VarChar(255)
  meta_data   Json     @default("{}") @db.Json
  from        String?  @default("") @db.VarChar(255)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @db.Timestamptz(6)

  stores stores @relation(fields: [store_id], references: [id])
}

enum enum_branches_branch_status {
  active
  inactive
}

enum enum_branchs_branch_status {
  active
  inactive
}

enum enum_consumers_gender {
  male
  female
}

enum enum_memberships_employee_status {
  active
  inactive
}

enum UserType {
  user
  membership
}

enum enum_users_permission {
  Store_All      @map("Store.All")
  Report_All     @map("Report.All")
  Supplier_All   @map("Supplier.All")
  Medicine_All   @map("Medicine.All")
  Pharmacist_All @map("Pharmacist.All")
  Promotion_All  @map("Promotion.All")
  Customer_All   @map("Customer.All")
  User_Read      @map("User.Read")
  User_Update    @map("User.Update")
  User_Create    @map("User.Create")
}
